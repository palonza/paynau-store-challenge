# ========================================
# Dockerfile
# ========================================
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
WORKDIR /src

# Copy solution and project files
COPY ["Paynau.sln", "./"]
COPY ["src/Paynau.Domain/Paynau.Domain.csproj", "src/Paynau.Domain/"]
COPY ["src/Paynau.Application/Paynau.Application.csproj", "src/Paynau.Application/"]
COPY ["src/Paynau.Infrastructure/Paynau.Infrastructure.csproj", "src/Paynau.Infrastructure/"]
COPY ["src/Paynau.Api/Paynau.Api.csproj", "src/Paynau.Api/"]

# Restore dependencies
RUN dotnet restore "Paynau.sln"

# Copy all source code
COPY . .

# Build the application
WORKDIR "/src/src/Paynau.Api"
RUN dotnet build "Paynau.Api.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
RUN dotnet publish "Paynau.Api.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Final stage - runtime
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app

# Copy published files
COPY --from=publish /app/publish .

# Copy seed files
COPY ["src/Paynau.Infrastructure/Seed/products.json", "Seed/"]
COPY ["src/Paynau.Infrastructure/Seed/orders.json", "Seed/"]

EXPOSE 5001

ENV ASPNETCORE_URLS=http://+:5001

ENTRYPOINT ["dotnet", "Paynau.Api.dll"]

# ========================================
# docker-compose.yml
# ========================================
version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: paynau-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-MySqlP@ssw0rd}
      MYSQL_DATABASE: PaynauDb
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - paynau-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-MySqlP@ssw0rd}"]
      timeout: 20s
      retries: 10

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paynau-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Default=Server=mysql;Database=PaynauDb;User=root;Password=${MYSQL_ROOT_PASSWORD:-MySqlP@ssw0rd};
      - JWT__Issuer=${JWT_ISSUER:-paynau-dev}
      - JWT__Audience=${JWT_AUDIENCE:-paynau-api}
      - JWT__Key=${JWT_KEY:-supersecretdevkey12345678901234567890}
      - LOGTAIL__ENABLED=${LOGTAIL_ENABLED:-false}
      - LOGTAIL__SOURCE_TOKEN=${LOGTAIL_SOURCE_TOKEN:-}
      - LOGTAIL__ENDPOINT=${LOGTAIL_ENDPOINT:-https://in.logtail.com}
    ports:
      - "5001:5001"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - paynau-network

volumes:
  mysql_data:

networks:
  paynau-network:
    driver: bridge

# ========================================
# .env
# ========================================
# Database Configuration
MYSQL_ROOT_PASSWORD=MySqlP@ssw0rd

# JWT Configuration
JWT_ISSUER=paynau-dev
JWT_AUDIENCE=paynau-api
JWT_KEY=supersecretdevkey12345678901234567890

# Logging Configuration
LOGTAIL_ENABLED=false
LOGTAIL_SOURCE_TOKEN=your-logtail-source-token-here
LOGTAIL_ENDPOINT=https://in.logtail.com

# ========================================
# .env.production
# ========================================
# Database Configuration
MYSQL_ROOT_PASSWORD=YourProductionPassword

# JWT Configuration
JWT_ISSUER=paynau-prod
JWT_AUDIENCE=paynau-api
JWT_KEY=your-production-secret-key-min-32-chars

# Logging Configuration
LOGTAIL_ENABLED=true
LOGTAIL_SOURCE_TOKEN=your-production-logtail-token
LOGTAIL_ENDPOINT=https://in.logtail.com

# ========================================
# .gitignore
# ========================================
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# Environment files
.env
.env.local
.env.production

# Rider
.idea/
*.sln.iml

# Visual Studio Code
.vscode/

# Mac
.DS_Store

# Database
*.db
*.db-shm
*.db-wal

# ========================================
# src/Paynau.Infrastructure/Seed/products.json
# ========================================
[
  {
    "id": 1,
    "name": "Smartwatch X100",
    "description": "Reloj inteligente con GPS",
    "price": 199.99,
    "stock": 50
  },
  {
    "id": 2,
    "name": "Laptop Pro 15",
    "description": "Laptop de 15 pulgadas",
    "price": 1499.00,
    "stock": 5
  },
  {
    "id": 3,
    "name": "Headphones Basic",
    "description": "Auriculares con micrófono",
    "price": 29.99,
    "stock": 0
  },
  {
    "id": 4,
    "name": "Coffee Maker 3000",
    "description": "Cafetera automática con temporizador",
    "price": 79.50,
    "stock": 1000
  },
  {
    "id": 5,
    "name": "USB Cable",
    "description": "Cable USB-C de 1 metro",
    "price": 9.99,
    "stock": 1
  },
  {
    "id": 6,
    "name": "Monitor UltraWide 34",
    "description": "Monitor curvo de 34 pulgadas",
    "price": 899.90,
    "stock": 0
  }
]

# ========================================
# src/Paynau.Infrastructure/Seed/orders.json
# ========================================
[]

# ========================================
# README.md
# ========================================
# Paynau Backend - Clean Architecture .NET 8

## Overview

Paynau Backend is a production-ready REST API built with .NET 8, implementing Clean Architecture principles, CQRS pattern with MediatR, and Entity Framework Core with MySQL.

## Features

- ✅ Clean Architecture (Domain, Application, Infrastructure, API)
- ✅ CQRS with MediatR
- ✅ Entity Framework Core with MySQL
- ✅ Swagger/OpenAPI documentation
- ✅ JWT Authentication
- ✅ Serilog with Logtail integration
- ✅ Docker support
- ✅ Automatic database seeding
- ✅ FluentValidation
- ✅ Optimistic concurrency control
- ✅ Comprehensive exception handling

## Prerequisites

- .NET 8 SDK
- Docker and Docker Compose
- MySQL 8.0+ (if running without Docker)

## Getting Started

### Using Docker Compose (Recommended)

1. Clone the repository
2. Navigate to the backend folder
3. Run the application:

```bash
docker-compose up --build
```

The API will be available at `http://localhost:5001`

### Running Locally

1. Update the connection string in `appsettings.json`
2. Run migrations:

```bash
cd src/Paynau.Api
dotnet ef database update
```

3. Run the application:

```bash
dotnet run
```

## API Endpoints

### Products

- `GET /api/products` - Get all products
- `GET /api/products/{id}` - Get product by ID
- `POST /api/products` - Create a new product
- `PUT /api/products/{id}` - Update a product
- `DELETE /api/products/{id}` - Delete a product

### Orders

- `GET /api/orders` - Get all orders
- `POST /api/orders` - Create a new order

## Swagger Documentation

Access the Swagger UI at: `http://localhost:5001/swagger`

## Project Structure

```
backend/
├── src/
│   ├── Paynau.Domain/          # Domain entities, exceptions, services
│   ├── Paynau.Application/     # Use cases, DTOs, validators
│   ├── Paynau.Infrastructure/  # Data access, repositories, EF Core
│   └── Paynau.Api/            # Controllers, middleware, startup
└── tests/
    └── Paynau.Tests/          # Unit and integration tests
```

## Running Tests

```bash
dotnet test
```

## Environment Variables

Configure the following environment variables in `.env`:

- `MYSQL_ROOT_PASSWORD` - MySQL root password
- `JWT_ISSUER` - JWT issuer
- `JWT_AUDIENCE` - JWT audience
- `JWT_KEY` - JWT signing key (min 32 characters)
- `LOGTAIL_ENABLED` - Enable Logtail logging
- `LOGTAIL_SOURCE_TOKEN` - Logtail source token

## Database Migrations

Create a new migration:

```bash
cd src/Paynau.Api
dotnet ef migrations add MigrationName
```

Apply migrations:

```bash
dotnet ef database update
```

## Business Rules

- Products must have name, description, price, and stock
- Stock cannot be negative
- Orders can only be created if sufficient stock is available
- Stock is decremented immediately when an order is created
- Optimistic concurrency is enforced on product updates
- Products with associated orders cannot be deleted

## License

MIT
